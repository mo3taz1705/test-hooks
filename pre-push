#!/bin/bash

# @link https://gist.github.com/mattscilipoti/8424018
#
# Called by "git push" after it has checked the remote status,
# but before anything has been pushed.
#
# If this script exits with a non-zero status nothing will be pushed.
#
# Steps to install, from the root directory of your repo...
# 1. Copy the file into your repo at `.git/hooks/pre-push`
# 2. Set executable permissions, run `chmod +x .git/hooks/pre-push`
# 3. Or, use `rake hooks:pre_push` to install
#
# Try a push to main, you should get a message `*** [Policy] Never push code directly to...`
#
# The commands below will not be allowed...
# `git push origin main`
# `git push --force origin main`
# `git push --delete origin main`


# protected_branch='main'
protected_branches=( main devel )

allowed_users1=( mo3taz1705 )

allowed_extensions=( yaml launch )


# policy="\n\n[Policy] Never push code directly to the "$protected_branch" branch! (Prevented with pre-push hook.)\n\n"

current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
echo $current_branch

current_user=$(git config user.name)
echo $current_user

push_command=$(ps -ocommand= -p $PPID)
echo $push_command

# current_changes=$(git diff)
# echo "current_changes: $current_changes"

is_destructive='force|delete|\-f|\-d'

will_remove_protected_branch=':'$protected_branch

do_exit(){
  policy="\n\n[Policy] Never push code directly to the "$current_branch" branch! (Prevented with pre-push hook.)\n\n"
  echo -e $policy
  exit 1
}




# IFS='.'
all_allowed='true'
    while read local_ref local_sha remote_ref remote_sha;
    do
        echo "fourth"
        # echo $local_sha
        # echo $local_ref
        # echo $remote_sha
        # echo $remote_ref
        CHANGED_FILES=$(git diff --name-only $local_sha $remote_sha)
        # echo "changed_files: $CHANGED_FILES"
        if [ ! -z "$CHANGED_FILES" -a "$CHANGED_FILES" != " " ]; then
            # echo $CHANGED_FILES
            read -r -a CHANGED_FILES_array <<< "${CHANGED_FILES}"
            for i in "${CHANGED_FILES_array[@]}"
            do
              echo "73"
              echo "$i"
              echo "75"
              # IFS='.'
              # or do whatever with individual element of the array
              found='false'
              for allowed_extension in "${allowed_extensions[@]}"
              do
                echo "81"
                echo ${allowed_extension}
                echo "83"
                if echo "${i}" | grep "${allowed_extension}"; then
                  found='true'
                  break
                fi
              done
              # if [ $found != 'true' ] && [ "$all_allowed" = "true" ]; then
              echo "found $found"
              echo "all_allowed before $all_allowed"
              if [ $found != 'true' ]; then
                all_allowed='false'
                break
              fi
              # echo "all_allowed after $all_allowed"
              # IFS=' '
            done
          







echo "all_allowed after $all_allowed"
            
            # RET=$?
            # if [ $RET -ne 0 ]; then
            #     echo "There is error(s) from style-check. Please fix them before push to the repo."
            #     exit $RET
            # fi
        fi
    done
    echo $all_allowed
# IFS=' '


for protected_branch in "${protected_branches[@]}"
do
  if [[ $push_command =~ $is_destructive ]] && [[ $push_command =~ $protected_branch ]]; then
    echo "first"
    do_exit
  fi

  if [[ $push_command =~ $is_destructive ]] && [ $current_branch = $protected_branch ]; then
    echo "second"
    do_exit
  fi

  if [[ $push_command =~ $will_remove_protected_branch ]]; then
    echo "third"
    do_exit
  fi


  # if [[ " ${allowed_extensions[@]} " =~ " ${current_changes} " ]]; then
    # IFS=' '
    
    # # do_exit
    # exit 0
  # fi

  # Prevent ALL pushes to protected_branch
  if [[ $push_command =~ $protected_branch ]] || [ $current_branch = $protected_branch ]; then
    if [[ ! " ${allowed_users1[@]} " =~ " ${current_user} " ]]; then
      # whatever you want to do when array doesn't contain value
      echo "fifth"
      do_exit
    fi
    echo "fifth"
  fi
done


unset do_exit

exit 0
